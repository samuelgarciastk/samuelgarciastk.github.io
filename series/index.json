[{"content":"研究设计的质量取决于四个关键设计属性：内部效度，外部效度，构念效度和统计结论效度。 以下将详细介绍这四个效度。\n内部效度 内部效度也被称为因果关系，它研究因变量的变化是否确实由假定的自变量的变化所造成，而不是由与研究背景毫无关联的外生变量所引起的。 因果关系的存在需要三个条件：\n原因和结果相互关联（也就是说，如果原因发生了，那么也会产生相应的结果；如果原因不发生，那么也不会产生相应的结果）； 时间优先：原因必须先于结果而发生； 没有其他看似合理的解释（或伪相关）。 某些研究设计，例如实验室实验，具有较高的内部效度。 这是因为实验室实验能够在控制外生变量影响的同时，通过某些控制条件对自变量（即原因）进行操控，并在控制施加的一段时间后观察结果（因变量）的变化。 其他的研究设计，如现场调查，由于无法操控自变量（即原因），而且原因和结果都是在相同的时间点观察到的（这与原因必须优先于结果的条件相违背，并造成似乎是预期的结果影响到原因，而不是原因影响结果），因而缺乏内部效度。 虽然实验研究与其他研究方法相比具有较高的内部效度，但是实验研究易受到历史记录、测试、试验设备、回归和其他因素的影响。\n外部效度 外部效度或可推广性主要指所观察的相关性是否可以从样本推广到总体（总体效度），或是否适用于其他人、其他组织、其他情境，或其他时间（即生态效度）。 比如，从美国金融公司样本推出的结论是否可以推广至所有金融公司（总体效度）或美国的其它公司（生态效度）？ 调查研究的数据来源于各种各样的个人、企业或者其他分析单位。 这种研究往往比实验研究更具普遍性。 这是因为实验研究会严格地人为控制外生变量，但在现实环境下这些外生变量是不可控的，因而导致实验研究的结论很难得到推广。\n各种研究设计的内部效度和外部效度间的关系如下图所示。\n一些研究人员认为内部效度和外部效度之间存在着权衡关系，即只有在牺牲内部效度的情况下才能获得高的外部效度，反之亦然。 但是，也未必总是如此。 如现场实验、纵向现场调查、以及多案例研究等研究设计就可以同时实现较高的内部效度和外部效度。 就我个人而言，我更倾向于兼具合理的内部效度和外部效度的研究设计，即落于如上图所示的锥形区域内的研究设计。 但这并不能表明位于锥形区域之外的研究设计的价值或有用性更低。 研究者最终将根据个人的偏好和能力，以及他想获得的内部效度和外部效度水平来选择研究设计。\n构念效度 构念效度衡量的是给定的量表在多大程度上测量了该理论构念。 社会科学研究中的许多构念，如移情、变革阻力以及组织学习等都是难以界定的，更不用说去衡量了。 例如，构念效度必须保证对移情这一构念的衡量确实反映的是共同感受而不是同情怜悯。 要做到这一点可能会比较困难，这是因为这些构念在意义上比较相近。\n统计结论效度 统计结论效度检验的是在多大程度上由统计方法所推导出的结论是有效的。 例如，统计结论效度会分析假设检验是否使用了正确的统计方法、所使用的研究变量是否符合统计检验的假定条件（如样本大小或分布要求）等。 因为诠释性研究设计并不使用统计检验，所以诠释性研究不存在统计结论效度的问题。\n下图给出了不同的效度及其在理论和实证研究层面所处的位置。\n研究设计的关键属性 ","description":"","id":0,"section":"posts","tags":["validity"],"title":"内部效度，外部效度，构念效度和统计结论效度","uri":"https://stksgarcia.github.io/posts/validity-introduction/"},{"content":"AIOps 是人工智能在软件运维中的应用，即利用机器学习、大数据和自动化决策来完成一系列需要人为进行大量手工干预的传统运维操作流程。 通过对运维数据的算法分析，AIOps 能够帮助运维或 DevOps 团队更智能、更快速的完成运维工作，从而在业务运营和客户受到影响之前，更早的发现软件系统问题并快速解决。 在 DevOps 环境下，运维团队能够通过 AIOps 应对现代 IT 环境产生的大量复杂数据，从而防止中断，维持正常运行时间，实现持续的服务保障。 AIOps 已经成为监控和管理混合、动态、分布式和组件化的现代 IT 环境的关键。\n本节将从软件运维的发展历史切入，介绍 AIOps 的必要性、构成及工作方式，并简述了 AIOps 的优势和使用场景。\n软件运维的发展历程 在介绍 AIOps 之前，我们先追溯到软件运维诞生之初。 最早期的运维，也就是手工运维，是以人工加上脚本的方式处理运维问题。 在这一阶段，运维任务相关的决策都是由运维人员做出的，而脚本作为一种辅助手段，仅仅是帮助运维人员执行一些可以机械化的运维任务，以减轻其工作负担。 这种情况下，软件系统规模有限，遇到的问题也相对简单，大多集中在硬件、网络和系统层面，所以对运维的要求并不高。\n随着 IT 公司业务场景和体量的复杂化，软件产品交付的频率增大，手工运维的方式已经渐渐满足不了要求了。 例如进行一次业务部署，运维人员可能需要先安装服务器，做系统配置，然后安装产品的软件包，并启停进程，再负载均衡上配置服务等。 因此，为了面对更加复杂化的运维场景，运维人员需要将一个个脚本功能串联起来，形成一个较为完善的运维流程，同时还需要对流程中的执行结果进行判断和校验。 而上述这个过程就是自动化运维的雏形。\n随着运维流程化发展，较大 IT 公司进一步对运维流程进行体系化改造，增加其自动化程度，这就步入了自动化运维阶段。 由于技术体系发展，运维所面临的场景复杂度也急剧上升，原有的运维技能如操作系统维护、系统配置、脚本编写已经完全满足不了要求。 同时，由于软件系统复杂度的提升，也需要运维投入更多的精力去关注业务软件架构和应用服务上。 于是，IT 公司对流程化的运维进行了平台化，以适应技术发展趋势，例如 DevOps、SRE (Site Reliability Engineering)、应用运维等。\n由于 IT 公司业务体量的巨大变化，软件底层资源也随之快速增长，引发底层技术的变革，如分布式技术，存储计算分离等，软件产品整体的复杂性发生了质的变化。 同时，业务模式及规模决定了用户不再只是使用单产品，而是整个平台层面、多产品的整体使用，所以运维复杂度也会呈几何式增长。 随着这些变化，完全的自动化运维从稳定性，效率，成本，安全等角度已经无法有效支撑其业务发展了。 因此，IT 公司对智能化运维的需求也越来越迫切了。\n近年来，机器学习算法的突破、计算能力的提升、海量的数据引发了 AI 革命，而 AIOps 也在这个时期逐渐诞生。 早在 2012 年，全球权威的 IT 研究与顾问咨询公司高德纳公司（Gartner）在一份报告1中提及了 ITOA，其定义为 IT 运维分析（IT Operations Analytics）。 ITOA 通过技术与服务手段，采集、存储、展现海量的 IT 运维数据，并进行有效的推理与归纳得出分析结论。 ITOA 为 AIOps 的发展奠定了基础。 随着时间的推移，在 2016 年 Gartner 将 ITOA 的概念升级为了 AIOps2，其最早的含义是基于算法的 IT 运维（Algorithmic IT Operations）。 这一阶段的 AIOps 平台利用大数据，现代的机器学习技术和其他高级分析技术，通过主动、个性化和动态的洞察力直接或间接地持续地增强 IT 操作功能。 它可以同时使用多个数据源，多种数据收集方法，实时分析技术，深层分析技术以及展示技术。 随着人工智能在多个领域的井喷式发展，Gartner 在 2017 年的一份报告3中将 AIOps 的含义定义为了基于人工智能的 IT 运维（Artificial Intelligence for IT Operations），也就是现在所说的智能运维。\nAIOps 将人工智能应用于运维领域，通过融合已有的运维数据，利用机器学习技术以及大数据技术来进一步解决自动化运维所不能解决的问题，真正打破数据烟囱，对监控、自动化、服务台进行支持，提高系统的预判能力、稳定性、降低 IT 成本以更好的支撑业务，并提高企业的产品竞争力。 AIOps 以创造商业价值为导向，对 IT 运维以及业务运维产生持续洞察，为 DevOps 提供持续反馈，加快企业在竞争日趋激烈市场环境中，数字化转型的步伐。 伴随人工智能技术在各个领域的落地，AIOps 是未来解决运维问题的必然方向。\n为什么需要 AIOps IT 基础设施从静态的、可预测的物理系统逐渐发展成了由软件定义的、可随时改变和配置的资源。 这就要求运维人员对 IT 基础设施的管理也要采用同样动态的技术和流程。 目前 IT 环境的运维管理的复杂性存在于下面三个层面：\n系统层面：系统大部分是模块化的、分布式的、动态的，其组成部分是短暂的。 系统的复杂性成为了 AIOps 的核心复杂性。 数据层面：第二层复杂性是由这些系统内部操作的数据产生，例如日志数据、指标数据、调用链数据、事件记录等。 这些数据由于数据量大、特异性强、种类多、冗余度大，因此复杂度高。 工具层面：第三层复杂性来源于监测和管理数据的工具以及系统的复杂性。 现在的工具越来越多，功能越来越窄，不一定进行数据交互，从而形成操作和数据孤岛。 随着 IT 基础设施的不断发展，基于规则的系统就显得越来越力不从心了。 原因就是它们依赖于一个预先确定的、静态的、同质化的 IT 环境。 AIOps 利用机器学习和大数据技术，让运维团队能够实时了解任何影响服务可用性和性能的问题，包括那些规则之外的、不可预见的问题。\nAIOps 的构成 有效实施 AIOps 的基础是确定使 AIOps 成为可能的核心组件有哪些。 通常情况下，AIOps 的主要组成部分包括：\n数据收集：成功的 AIOps 会使用不同的来源的运维数据，根据需求转换和聚合数据，有效备份和保留数据，并持续有效的维护数据质量，为数据分析和机器学习提供基础。 数据分析：一旦数据被适当地收集和转换，就会执行统计分析，以便从数据中得出见解。 机器学习：机器学习是利用从数据分析中得到的见解来做出自动决策的过程。 机器学习是通过算法实现的，这些算法允许软件自动对数据所表达的信息自动地做出反应。 人工智能：这里的人工智能指的是更广泛的自动化决策的范畴，机器学习是其中的一个组成部分。 AIOps 是如何运作的 并非所有的 AIOps 产品都是一样的。 为了使利益最大化，AIOps 应是一个从所有的 IT 监控源中获得数据的中心化的独立部署平台。 而这样的平台必须由五类算法驱动，以全面自动化和精简运维监控的五个关键维度。\n数据选择：从 IT 环境产生的大量高冗余、高噪音的 IT 数据中挑选出可能有问题的数据。 而这往往意味着要过滤掉高达 99% 的数据。 模式发现：对选定的、有意义的数据进行关联，找到它们之间的联系，并进行分组，以便进一步分析。 推理：找出问题的根源和反复出现的问题，以便对发现的问题采取行动。 协作：通知适当的操作人员和团队，并促进他们之间的合作，特别是当个人在地理上分散时。 同时需要保存事故数据，以加快未来对类似问题的诊断。 自动化：尽可能实现自动化响应和补救，使解决方案更加精确和快速。 在现实环境中，AIOps 平台从许多不同来源获取 IT 环境组件的异构数据，这些组件包括网络、应用、基础设施、云实例、存储等。 AIOps 利用熵算法去除噪音和重复，只选择真正相关的数据，大大减少了运维团队必须处理的警报数量，并消除了由于冗余的工单传送到不同团队而造成的重复工作。\n然后，AIOps 利用各种标准，如文本、时间和拓扑结构，将这些相关信息进行分组和关联。 接下来，它发现数据中的模式，并推断哪些数据项标志着原因，哪些标志着事件。 平台将分析结果传达给虚拟协作环境，参与解决事件的每个人都可以访问所有相关数据。 这些虚拟团队可以快速组建，使不同的专家能够围绕一个跨越技术或组织边界的问题进行解决。\n之后，他们可以迅速决定修复措施，并选择自动响应，以快速、准确地解决事件。 AIOps 还能提高自动化程度，使工作流程在有或没有人工干预的情况下被触发。 AIOps 平台存储了每个固定事件的原因和解决方案，并利用这些知识帮助运维团队诊断原因，并为未来的问题开出解决方案。\nAIOps 的优势 AIOps 为运维团队提供了所需的速度和敏捷性，以确保关键服务的正常运行时间，并提供最佳的用户体验。 基于规则的运维流程的脆弱性，信息孤岛，以及重复性的人工操作，使得运维人员在没有 AIOps 的环境下很难完成运维任务。 以下是 AIOps 的一些好处：\nAIOps 可以消除噪音和干扰，使运维人员能够专注于重要的事情，而不会被无关的警报所干扰。 这加快了对影响服务的问题的检测和解决速度，并防止出现影响销售和客户体验的中断。 通过关联多个数据源的信息，AIOps 消除了信息孤岛，并在整个 IT 环境内部和云端提供了一个整体的、上下文化的视野。 通过促进不同专家和服务所有者之间的无摩擦、跨团队协作，AIOps 加快了诊断和解决时间，最大限度地减少了对最终用户的干扰。 通过先进的机器学习技术在后台捕捉有用的信息，以进一步提高对未来情况的处理。 通过知识循环和根因识别，自动化工作流程以应对反复出现的情况，使运维团队更接近无工单和自我修复的环境。 AIOps 的使用场景 通过使用数据收集、数据分析和机器学习相结合的完整 AIOps 解决方案，运维团队可以支持以下几个关键使用场景：\n异常检测：AIOps 最基本的使用案例就是检测数据中的异常，然后根据需要对它们做出反应。 根因分析：AIOps 能够帮助运维团队自动执行根本原因分析，从而快速解决问题。 预测：AIOps 可以让工具能对未来进行自动预测，例如用户流量在特定的时间点可能会怎样的变化，然后做出相应的反应。 报警管理：AIOps 在帮助运维团队应对他们必须处理的大量警报，以支持正常的运维方面发挥着越来越重要的作用。 智能修复：AIOps 通过自动化工具驱动闭环的故障修复，而不依赖于运维人员。 https://www.gartner.com/en/documents/2158125\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www.gartner.com/en/documents/3263717\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www.gartner.com/en/documents/3770467\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"","id":1,"section":"posts","tags":["aiops"],"title":"AIOps 简介","uri":"https://stksgarcia.github.io/posts/aiops-introduction/"},{"content":"最近又开始折腾博客了，大概拖了有一个月了才开始记录迁移博客的感受。 简言之，让我从 Hexo 迁移到 Hugo 最大的原因是 Emacs Org mode 下的 Hugo 插件。\n一切的开始要从我入坑 Doom Emacs 说起。 以前我一直使用的是 Spacemacs，我非常感谢开发者做的贡献，让我使用到了那么易用的 Emacs 编辑器。 但是 Spacemacs 的速度有点慢，定制化的时候觉得有些杂乱，不是很方便，还有些卡。 还有 Spacemacs 的版本更新的有点慢，Issue 也似乎堆积的有点多。 加之最近放假闲下来了一段时间，所以又开始折腾乱七八遭的东西。\n然后我就看到了 Doom Emacs。 有很多人推荐它，另外更新频率也很高，就开始用它了。 目前使用了已经有一段时间了，真的很不错。\n在这之后，我就用 Doom Emacs 折腾博客了，想整一套 Org mode 写博客的工作流。 浏览网页的时候无意间看到了用 Org mode Hugo 来生成博客。 这种方式的优点是，写博客深度整合 Org mode 的特性，从内容编写到网页生成都很流畅。 所有的博客可以使用一个 Org 文件保存，方便管理和回顾。 此外，Hugo 生成博客的速度真的比 Hexo 快好多。\n总之，一个能让我在 Emacs 里面完成所有博客相关活动的平台真的很舒服。\n","description":"","id":2,"section":"posts","tags":["blog"],"title":"从 Hexo 到 Hugo","uri":"https://stksgarcia.github.io/posts/migration-from-hexo-to-hugo/"},{"content":"读完《卓有成效的管理者》后在此对一些重要观点进行记录。\n掌握自己的时间 有效的管理者知道应该将他们的时间用在什么地方。 他们所能控制的时间非常有限，他们会有系统地工作，来善用这有限的时间。\n记录时间 时间是最稀有的资源，通常是一项限制因素，因为时间的供给丝毫没有弹性。\n要提高管理者的有效性，第一步就是记录时间耗用的实际情形。\n时间记录可以使用小册子自己记录。 但重要的是必须在处理某一工作的“当时”立即加以记录，而不能事后凭记忆补记。\n管理时间 如何诊断自己的时间 试问以下几个问题：\n首先要找出什么事根本不必做，这些事做了也完全是浪费时间，于最终的成果无助。\n时间记录上的哪些活动可以由别人代为参加而又不影响效果。\n还有一项时间浪费的因素，是管理者自己可以控制并且可以消除的，这项因素是：管理者在浪费别人的时间。\n一个简单的方法可以诊断出来：去问问你的下属。\n消除浪费时间的活动 找出由于缺乏制度或远见而产生时间浪费的因素。\n应注意的现象，是机构中一而再，再而三出现同样的“危机”。 同样的危机如果出现了第二次，就绝不应该再让它出现第三次。\n一项重复出现的危机应该是可以预见的，并不仅限于组织的较低层次。 组织中的每一部门都深受其害。 同一个危机如果重复出现，往往是疏忽和懒散造成的。 同理，一个管理上了轨道的组织，常常是一个令人觉得兴味索然的组织。\n人员过多，也常造成时间的浪费。\n判断人数是否过多，有一个靠得住的标准。 如果一个高级管理人员，尤其是经理，不得不将他工作时间的 1/10 花在处理所谓的“人际关系问题”上，花在处理纠纷和摩擦上，花在处理争执和合作问题上，那么这个单位人数就过多了。\n另一个常见的浪费时间的原因，是组织不健全。其表现就是会议太多。\n会议是组织缺陷的一种补救措施。 会议太多，表示职位结构不当，也表示单位设置不当。 会议太多，表示本应由一个职位或一个单位做的工作，分散到几个职位或几个单位去了。 同时表示职责混乱以及未能将信息传送给需要的人员。\n最后一项浪费时间的因素，是信息功能不健全。\n另一种同样常见的现象，是信息的表达方式不当，其后果有时更为严重。\n统一安排时间 第一步应先估计究竟有多少“自由时间”真正是他自己的时间，然后保留出相当分量的一段连续性的整块时间来。 一旦发现还有别的事情在“蚕食”他保留的时间，便立刻再仔细分析他的时间记录，再将其中比较次要的工作重新过滤一次。\n对时间的控制与管理不能一劳永逸。 要持续不断地做时间记录，定期对这些记录进行分析，还必须根据自己可以支配的时间的多少，给一些重要的活动定下必须完成的期限。\n我能贡献什么 有效的管理者重视对外界的贡献。 他们并非为工作而工作，而是为成果而工作。 他们不会一接到工作就一头钻进去，更不会一开头就探究工作的技术和手段，他们会首先自问：“别人期望我做出什么成果？”\n管理者的承诺 有效性表现在以下三个方面：\n自己的工作，包括工作内容、工作水准、工作标准及其影响； 自己与他人的关系，包括对上司、同事和下属； 各项管理手段的运用，例如会议或报告等。 一般机构对成效的要求往往表现在以下三个方面：\n直接成果； 树立新的价值观及对这些价值观的重新确认； 培养与发明明天所需要的人才。 正确的人际关系 有效人际关系的基本要求：\n互相沟通；\n团队合作；\n强调贡献有助于横向的沟通，因此能够促进团队合作。\n自我发展；\n个人能否有所发展，在很大程度上要看你是否重视贡献。\n培养他人。\n重视贡献的管理者必然会同时启发他人寻求自我发展。\n有效的会议 有效的管理者在会议开始时，会先说明会议的目的和要求达成的贡献。 同时，他还要设法让会议紧紧围绕着主题。 他绝不会使会议成为一次摆龙门阵的机会，任大家随便发言。 当然，如果会议的目的是在激发大家的思想和创见，他也不会仅让某一个人滔滔不绝。 他会刺激每一位与会人员的发言兴趣。 但是在会议结束之前，，他会回到开场所介绍的主题，使会议获得的结论与主题相符。\n如何发挥人的长处 有效的管理者善于利用长处，包括自己的长处、上司的长处、同事的长处和下属的长处。 他们还善于抓住有利形势，做他们能做的事。 他们不会把工作建立在自己的短处上，也绝不会去做自己做不了的事。\n要用人所长 如何用人才能既发挥他人的长处，又不致陷入因人设事的陷阱呢？ 大致来说，不外乎下面 4 个原则：\n卓有成效的管理者不会认为职位是上天或上帝创造的。\n要将自己管辖下的职位都设置得合情合理。 一旦发现某职位设计不当，他会立刻重新设计，而不会设法寻找天才来担任，他知道组织的好坏不是由天才来验证的。 只有“让平凡人都能做出不平凡的事”的组织，才是好的组织。\n职位的要求要严格，而涵盖要广。\n这是说，合理的职位，是对具有才干的人的挑战。 同时因为职位的涵盖很广，所以人们可以把与任务有关的优势转化为切实的成果。\n卓有成效的管理者在用人时，会先考虑某人能做什么，而不是先考虑职位的要求是什么。\n有效的管理者，通常有他自己的一套与众不同的考评方式。 这套方式，第一步是列出对某人过去职务和现任职务所期望的贡献，再把某人的实际绩效记录与这项期望贡献相对照，然后检讨下面 4 个问题：\n哪方面的工作他确实做得很好？ 因此，哪方面的工作他可能会做得更好？ 为了充分发挥他的长处，他还应该再学习或获得哪些知识？ 如果我有个儿子或女儿，我愿意让我的子女在他的指导下工作吗？愿意或不愿意的理由是什么？ 卓有成效的管理者知道在用人之所长的同时，必须容忍人之所短。\n充分发挥自己的长处 有效的管理者会顺应自己的个性特点，不会勉强自己。 他注意的是自己的绩效、自己的成果，从而发展出自己的工作方式来。\n要事优先 有效的管理者集中精力于少数重要的领域，在这少数重要的领域中，如果能有优秀的绩效就可以产生卓越的成果。 他们会按照工作的轻重缓急设定优先次序，而且坚守优先次序。 他们别无选择，只能要事第一。 重要的事先做，不重要的事放一放，甚至不做，两种事都做，反倒会一事无成。\n摆脱昨天 一位希望自己有效，也希望其组织有效的管理者，必然会自我检视一切的方案、活动和任务。 他会问：“这件事现在还有继续做的价值吗？” 如果认为没有价值了，他便立即停手，而将时间精力转移到其他只要做得好，便能使自己更为有效的任务上，也能促使他的组织更为成功。\n先后次序的考虑 以下是几条可帮助确定优先次序的重要原则，每条都与勇气密切相关：\n重将来而不重过去； 重视机会，不能只看到困难； 选择自己的方向，而不盲从； 目标要高，要有新意，不能只求安全和容易。 决策的要素 决策的五点特征：\n要确实了解问题的性质，如果问题是经常性的，那就只能通过一项建立规则或原则的决策才能解决。\n我们常犯的错误，便是误将“经常问题”视为一连串的“偶发问题”。 换言之，没有了解问题症结所在的基础，对问题缺乏经常性的认识与原则，其结果自然是失败与无效的。\n另一种常犯的错误，是误将真正的新问题视为旧病复发，因而仍旧应用旧原则。\n第三种常见的错误，是对某些根本性问题的界定似是而非。\n最后一种错误，是只看到问题的部分，而没有看清全貌。\n要确实找出解决问题时必须满足的界限，换言之，应找出问题的“边界条件”。\n通常，探求边界条件的方法，是探求“解决某一问题应有什么最低需要”。\n仔细思考解决问题的正确方案是什么以及这些方案必须满足哪些条件，然后再考虑必要的妥协、适应及让步事项，以期该决策能被接受。\n不必为了使建议容易被接受而想到折中。 必须先告诉别人什么是“正确的”，才能有“正确的折中”。\n决策方案要同时兼顾执行措施，让决策变成可以被贯穿的行动。\n若要化决策为行动，首先必须明确无误地回答下面几个问题：\n谁应该了解这项决策？ 应该采取什么行动？ 谁采取行动？ 这些行动应如何进行，才能使执行人能够执行？ 在执行的过程中重视反馈，以印证决策的正确性及有效性。\n若想了解赖以做出决策的前提是否仍然有效，或者是否已经过时，亲自检查才最为可靠。\n有效的决策 有效的管理者必须善于做有效的决策。他们知道有效的决策事关处事的条理和秩序问题，也就是如何按正确的次序采取正确的步骤。 他们知道一项有效的决策，总是在“不同意见讨论”的基础上做出的判断，它绝不会是“一致意见”的产物。 他们知道快速的决策多为错误的决策，真正不可或缺的决策数量并不多，但一定是根本性的决策。 他们需要的是正确的战略，而不是令人眼花缭乱的战术。\n个人见解和决策的关系 决策的过程往往不是从搜集事实开始，而是先从其本人的见解开始的。 所谓见解，乃是“尚待证实的假设”；见解不能获得证实，就毫无价值可言。 但要确定什么才是事实，必须先确定相关的标准，尤其是有关的衡量标准。\n有效的决策，常来自多种不同且互相冲突的见解中产生，常来自多种旗鼓相当、优劣互见的方案中产生。\n适当的衡量方法只有依靠“反馈”制度。\n反面意见的运用 第一，唯有反面意见，才能保护决策者不致沦为组织的俘虏。 突破的办法就在于引起争辩、掌握实据和经过深思熟虑的反面意见。\n第二，反面意见本身，正是决策所需的“另一方案”。\n第三，反面意见可以激发想象力。\n最后，还得问一个问题：“我们是不是真的需要一项决策？” 有时候什么都不做也是一种决策。\n做决策与不做决策应遵循的原则：\n如果利益远大于成本及风险，就该行动； 行动或不行动，切忌只做一半或折中。 ","description":"","id":3,"section":"posts","tags":["management","reading"],"title":"如何成为卓有成效的管理者？","uri":"https://stksgarcia.github.io/posts/how-to-be-an-effective-executive/"},{"content":"只要在文件开头加入以下代码：\n1 2 #+LATEX_COMPILER: xelatex #+LATEX_HEADER: \\usepackage{xeCJK} ","description":"","id":4,"section":"posts","tags":["org-mode","latex","emacs"],"title":"Org mode 导出中文 PDF","uri":"https://stksgarcia.github.io/posts/org-mode-export-pdf-in-chinese/"},{"content":"读完《自控力》后在此对一些重要观点进行记录。\n第一章 我要做，我不要，我想要：什么是意志力？为什么意志力至关重要？ 核心思想：意志力实际上是“我要做” “我不要”和“我想要”这三种力量。 它们协同努力，让我们变成更好的自己。\n牢记自己真正想要的是什么。 增强意志力的一件简单、无痛的事\u0026ndash;冥想。 神经学家发现，如果你经常让大脑冥想，它不仅会变得擅长冥想，还会提升你的自控力，提升你集中注意力、管理压力、克制冲动和认识自我的能力。 自控力是一个过程，在这个过程中，人们不断偏离目标，又不断把注意力收回来。 每个意志力挑战都是一次自我博弈。 第二章 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑 核心思想：意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。\n三思而后行：先让自己放慢速度，而不是给自己加速（比如应激反应）。 任何给你的身心带来压力的东西都会影响自控力的生理基础，甚至会摧毁你的意志力。 通过呼吸实现自控：将呼吸频率降低到每分钟 4 ～ 6 次。 自控力的良药是锻炼。 充足的睡眠可以帮助获得更强的意志力。 为了能够保持健康、维持幸福生活，你需要放弃对意志力的完美控制。 即便你增强了自己的意志力，你也不可能完全控制自己想什么、感觉什么、说什么或者做什么。你需要明智地使用意志力的能量。 从压力和自控力中恢复的最佳途径就是放松。 当我处在慢性压力中，迎接意志力挑战的是最冲动的自己，想要赢得意志力挑战，我们需要调整到正确的身心状态，用能量去自控，而不是自卫。 这就意味着，我们需要从压力中恢复过来，保证有能量做最好的自己。 第三章 累到无力抵抗：为什么自控力和肌肉一样有极限？ 核心思想：自控力就像肌肉一样有极限。 自控力用得太多会疲惫，但坚持训练能增强自控力。\n意志力的肌肉模式告诉我们，自控力从早上到晚上会逐渐减弱。 突然增加的糖分会让你在短期内面对紧急情况时有更强的意志力。 但从长远来说，过度依赖糖分并不是自控的好方法。 “自控力肌肉”锻炼模式： 增强“我不要”的力量：不随便发誓、用不常用的手进行日常活动等。 增强“我想要”的力量：每天都做一些事（但不是你已经在做的事），用来养成习惯或不再找借口。 增强自我监控能力：认真记录一件你平常不关注的事。 自控力的极限和身体的极限是一样的道理，也就是说，我们总是在意志力真正耗尽之前就感到无法坚持了。 如果我们想增强自控力，就要考虑如何支撑住最疲惫的自己，而不是指望最理想的自己突然出现来拯救生活。 我们面临的挑战是，像聪明的运动员那样去训练，去提升我们的极限，但要一步一个脚印地去做。 当我们虚弱的时候，我们能从动力中汲取能量。 同样，我们也能让疲惫的自己做出明智的选择。 第四章 容忍罪恶：为何善行之后会有恶行？ 核心思想：当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事。 为了能够更好地自控，我们需要忘掉美德，关注目标和价值观。\n我们很容易认为，纵容自己就是对美德最好的奖励。 我们忘记了自己真正的目标，向诱惑屈服了。 “道德许可”最糟糕的部分并不是它可疑的逻辑，而是它会诱使我们做出背离自己最大利益的事。 它让我们相信，放弃节食、打破预算、多抽根烟这些不良行为都是对自己的“款待”。 不要把支持目标实现的行为误认为是目标本身。 不是说你做了一件和你目标一致的事情，你就不会再面临危险了。 进步可能会让我们放弃曾经为之奋斗的东西。 “道德许可”并不只计算过去的善行，我们同样可能看到未来，认为我们计划要做的善行也值得称赞。 我们不断期望明天能做出和今天不同的选择，但这种期望是错误的。 如果我们预料到自己无法完成设定的目标，那么还不如在开始之前就认输。 如果我们现在表现糟糕，却用对未来的乐观期待来演示它，那么还不如一开始就不要设定这个目标。 当“光环效应”（只关注一个事物最有益的品质，而忽视其他）影响到你的意志力挑战时，你需要找到最具体的测量标准（比如卡路里、花费、消耗或浪费的时间），以此判断这个选择是否和你的目标相符。 如果只是按照“正确”和“错误”来判断做过的事，而不是牢记我们真正想要的东西，就会带来与目标相抵触的冲动，并允许我们做出妨碍自己的行动。 想要做到始终如一，我们就需要认同目标本身，而不是我们做善事时的光环。 第五章 大脑的弥天大谎：为什么我们误把渴望当幸福？ 核心思想：我们的大脑错把奖励的承诺当作快乐的保证，所以，我们会从不可能带来满足的事物中寻找满足感。\n多巴胺的首要功能是让我们追求快乐，而不是让我们快乐。 虽然我们所处的世界总让我们产生欲望，但我们只要用心观察，就能看透一些东西。 知道那是怎么一回事并不能完全消除你的欲望，但它能让你至少有机会抗争一下，锻炼一下“我不要”力量。 我们误把渴望的感觉当作了快乐。 当我们把自己从错误的奖励承诺中解放出来时，我们常常发现，我们误以为的快乐源泉，其实正是痛苦的根源。 如果我们想拥有自控力，就需要区分让我们的生活有意义的真实奖励，和让我们分散精力、上瘾的虚假奖励。 第六章 “那又如何”：情绪低落为何会使人屈服于诱惑？ 核心思想：情绪低落会使人屈服于诱惑，摆脱罪恶感会让你变得更强大。\n当你感到压力时，你的大脑就会指引着你，让你去做它认为能带给你快乐的事情。 “恐惧管理”的方法能让我们不去想那个不可避免的死亡。 但当我们在诱惑中寻找慰藉的时候，我们是在不自觉地加速迈向坟墓的脚步。 导致更多堕落的行为并不是第一次的放弃，而是第一次放弃后产生的羞耻感、罪恶感、失控感和绝望感。 一旦你陷入了这样的循环，似乎除了继续做下去，就没有别的出路了。 当你（又一次）责备自己（又一次）屈服于诱惑的时候，往往会带来更多意志力的失败，造成更多的痛苦。 但是， 你寻求安慰的东西并不能中断这个循环，它只会给你带来更深切的罪恶感。 自我批评会降低积极性和自控力，而且也是最容易导致抑郁的因素。 它不仅耗尽了“我要做”的力量，还耗尽了“我想要”的力量。 相反，自我同情则会提升积极性和自控力。 在个人挫折面前，持自我同情态度的人比持自我批评态度的人更愿意承担责任。 他们也更愿意接受别人的反馈和建议，更可能从这种经历中学到东西。 我们必须避免常见的意志力陷阱，即用“改变的承诺”而不是“改变”来改善我们的心情。 第七章 出售未来：及时享乐的经济学 核心思想：我们无法明确地预知未来，这为我们带来了诱惑，让我们拖延着不做某些事。\n当你觉得自己无法做到“不会有下一次”的时候，不妨用“10 分钟延迟法则”来增强你的自控力。 在这 10 分钟里，一定要时刻想着长远的奖励，抵制住诱惑。 第八章 传染：为什么意志力会传染？ 核心思想：自控受到社会认同的影响，这使得意志力和诱惑都具有传染性。\n我们个人的选择在很大程度上会受他人想法、意愿和行为的影响。 甚至，我们认为他们想要我们做什么，都会影响我们的选择。 研究发现，我们很容易感染别人的目标，从而改变自己的行为。 目标传染在两个方向上都会起作用\u0026ndash;你既可以感染自控，也可能感染自我放纵。 在每天刚开始的时候花几分钟想想自己的目标，想想你会怎么受到诱惑，想要改变自己的目标。 当我们看到别人忽视规则、受欲望支配的时候，我们更可能在任何冲动面前选择屈服。 如果我们想让别人更有意志力，就要让他们相信自控是个社会规范。 在考虑如何做出选择时，我们经常想象自己是别人评估的对象。 这为人们自控提供了强大的精神支持。 预想自己实现目标后会非常自豪的人，更有可能坚持到底并获得成功，预想自己的行为会受到谴责也很有效。 即使面对诱惑，自豪的力量也会让你安然度过。 想象别人的目光是很有激励作用，但如果我们失败了，别人毫不掩饰的轻蔑目光则会让我们羞于公开露面。 把意志力挑战变成集体项目。 第九章 别读这章：“我不要”力量的局限性 核心思想：试图压抑自己的想法、情绪和欲望，只会产生相反的效果，让你更容易去想、去感受、去做 你原本最想逃避的事。\n人越是想摆脱某种想法，这种想法就越可能回到意识中，这并不意味着这个想法是真实的，也不意味着这个想法很重要。 去想自己所想，追随自己的感觉，这是治疗焦虑、抑郁、嗜食和各种上瘾症状的有效方法。放弃控制内心感受，反而能让我们更好的控制外在行为。 如果我们控制思想和行为失败了，我们会认为是自己压抑得不够，而不会认为压抑思想的方法根本行不通。这反而会使我们更强烈地想要压抑自己。 直面自身欲望，但不要付诸行动。 把“我不要”变成“我想要”。 ","description":"","id":5,"section":"posts","tags":["self-control","reading"],"title":"关于《自控力》","uri":"https://stksgarcia.github.io/posts/about-self-control/"},{"content":"使用下面这条命令：\n1 sync; echo 1 \u0026gt; /proc/sys/vm/drop_caches sync 命令:\nLinux sync 命令用于数据同步，sync 命令是在关闭 Linux 系统时使用的。\nLinux 系统中欲写入硬盘的资料有的时候会了效率起见，会写到 filesystem buffer 中，这个 buffer 是一块记忆体空间，如果欲写入硬盘的资料存于此 buffer 中，而系统又突然断电的话，那么资料就会流失了，sync 指令会将存于 buffer 中的资料强制写入硬盘中。\n/proc/sys/vm/drop_caches:\nTo free pagecache, use:\n1 echo 1 \u0026gt; /proc/sys/vm/drop_caches To free dentries and inodes, use:\n1 echo 2 \u0026gt; /proc/sys/vm/drop_caches To free pagecache, dentries and inodes, use:\n1 echo 3 \u0026gt;/proc/sys/vm/drop_caches ","description":"","id":6,"section":"posts","tags":["page-cache","linux"],"title":"Linux 下清空 Page cache","uri":"https://stksgarcia.github.io/posts/clear-page-cache/"},{"content":"下面的双重校验锁单例是线程安全的吗？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Singleton { private static Singleton instance = null private Singleton() {} public static Singleton getInstance() { if (instance == null) { synchronzied(Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } } JVM 内存模型 Java 内存模型规定，对于多个线程共享的变量，存储在主内存当中，每个线程都有自己独立的工作内存，线程只能访问自己的工作内存，不可以访问其它线程的工作内存。 工作内存中保存了主内存共享变量的副本，线程要操作这些共享变量，只能通过操作工作内存中的副本来实现，操作完毕之后再同步回到主内存当中。\nvolatile 关键字 很多时候我们需要一个线程对共享变量的改动，其它线程也需要立即得知这个改动该怎么办呢？\nJava 为此提供了 volatile 关键字，在声明变量的时候加入 volatile 关键字就可以保证变量的内存可见性，即变量改变对所有的线程都是立即可见的。\nvolatile 保证可见性的原理是在每次访问变量时都会进行一次刷新，因此每次访问都是主内存中最新的版本。 所以 volatile 关键字的作用之一就是保证变量修改的实时可见性。\n指令重排 指令重排序是 JVM 为了优化指令，提高程序运行效率进行的优化操作。 指令重排序包括编译器重排序和运行时重排序。 JVM 规范规定，指令重排序可以在不影响单线程程序执行结果前提下进行。\n指令重排示例 假设有这么两个共享变量 a 和 b：\n1 2 private int a; private int b; 在线程 A 中有两条语句对这两个共享变量进行赋值操作：\n1 2 a = 1; b = 2; 假设当线程 A 对 a 进行复制操作的时候发现这个变量在主内存已经被其它的线程加了访问锁，那么此时线程 A 怎么办？ 等待释放锁？不，等待太浪费时间了，它会去尝试进行 b 的赋值操作，b 这时候没被人占用，因此就会先为 b 赋值，再去为 a 赋值，那么执行的顺序就变成了：\n1 2 b = 2; a = 1; 指令重排导致出错 对于在同一个线程内，这样的改变是不会对逻辑产生影响的，但是在多线程的情况下指令重排序会带来问题。 看下面这个情景：\n1 2 3 4 5 6 7 8 9 // 在线程 A 中： context = loadContext(); inited = true; // 在线程 B 中： while (!inited ) { //根据线程 A 中对 inited 变量的修改决定是否使用 context 变量 sleep(100); } doSomethingwithconfig(context); 假设线程 A 中发生了指令重排序：\n1 2 inited = true; context = loadContext(); 那么 B 中很可能就会拿到一个尚未初始化或尚未初始化完成的 context，从而引发程序错误。\n指令重排导致单例模式失效 下面是一段双重校验锁单例模式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Singleton { private static Singleton instance = null private Singleton() {} public static Singleton getInstance() { if (instance == null) { synchronzied(Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } } 看似简单的一段赋值语句： instance = new Singleton(); ，其实 JVM 内部已经转换为多条指令：\n1 2 3 memory = allocate(); //1：分配对象的内存空间 ctorInstance(memory); //2：初始化对象 instance = memory; //3：设置 instance 指向刚分配的内存地址 但是经过重排序后如下：\n1 2 3 memory = allocate(); //1：分配对象的内存空间 instance = memory; //3：设置 instance 指向刚分配的内存地址，此时对象还没被初始化 ctorInstance(memory); //2：初始化对象 可以看到指令重排之后，instance 指向分配好的内存放在了前面，而这段内存的初始化被排在了后面，在线程 A 初始化完成这段内存之前，线程 B 虽然进不去同步代码块，但是在同步代码块之前的判断就会发现 instance 不为空，此时线程 B 获得 instance 对象进行使用就可能发生错误。\n解决方法 volatile 关键字除了可以保证变量修改的可见性之外，还有另一个重要的作用：禁止指令重排序。 变量以关键字 volatile 修饰之后，就会阻止 JVM 对其相关代码进行指令重排，这样就能够按照既定的顺序指执行。\n在《深入理解 Java 虚拟机》一书中提到\nvolatile 屏蔽指令重排的语义在 JDK1.5 中才被完全修复，此前的 JDK 中即使将变量声明为 volatile 也仍然不能完全避免重排序所导致的问题（主要是 volatile 变量前后的代码仍然存在重排序问题），这点也是在 JDK1.5 之前的 Java 中无法安全地使用 DCL（双锁检测）来实现单例模式的原因。\n","description":"","id":7,"section":"posts","tags":["java"],"title":"JVM 指令重排对双重校验锁单例模式的影响","uri":"https://stksgarcia.github.io/posts/singleton-and-jvm-instruction-rearrangement/"},{"content":"启发式算法（Heuristic Algorithm）是相对于最优化算法提出的。 它有不同的定义：\n其中一种是，一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例的一个可行解，该可行解与最优解的偏离程度一般不能被预计。 另一种是，启发式算法是一种技术，这种技术使得在可接受的计算成本内去搜寻最好的解，但不一定能保证所得的可行解和最优解，甚至在多数情况下，无法阐述所得解同最优解的近似程度。 启发式算法是一种近似算法，它更像是一种算法框架，定义了算法的流程步骤，并没有成型的理论体系。\n有一类的通用启发式策略称为元启发式算法（Metaheuristic），通常使用乱数搜寻技巧。 他们可以应用在非常广泛的问题上，但不能保证效率。 近年来随着智能计算领域的发展，出现了一类被称为超启发式算法（Hyper-Heuristic Algorithm）的新算法类型。\n以下表格是对启发式算法的分类：\n传统启发式算法 元启发式算法 超启发式算法 搜索空间 由实例解构成 由实例解构成 由启发式算法构成 问题的领域知识 需要 需要 不需要（或很少需要） 典型类别 局部搜索 蚁群算法 基于随机选择的超启发式算法 爬山法 粒子群算法 基于贪心策略的超启发式算法 贪心法 模拟退火算法 基于元启发式算法的超启发式算法 遗传算法 基于学习的超启发式算法 禁忌搜索 进化规划 进化策略 变邻域搜索 人工神经网络 ","description":"","id":8,"section":"posts","tags":["heuristic-algorithm"],"title":"启发式算法概述","uri":"https://stksgarcia.github.io/posts/heuristic-algorithm-overview/"},{"content":"粒子群算法 粒子群算法，也称粒子群优化算法或鸟群觅食算法，来源于对一个简化社会模型的模拟。 PSO 算法属于进化算法的一种，和模拟退火算法相似，它也是从随机解出发，通过迭代寻找最优解，它也是通过适应度来评价解的品质，但它比遗传算法规则更为简单，它没有遗传算法的“交叉”（Crossover）和“变异”（Mutation）操作，它通过追随当前搜索到的最优值来寻找全局最优。 这种算法以其实现容易、精度高、收敛快等优点引起了学术界的重视，并且在解决实际问题中展示了其优越性。 粒子群算法是一种并行算法。\n算法原理 设想这样一个场景：一群鸟在随机搜索食物。 在这个区域里只有一块食物。 所有的鸟都不知道食物在那里。 但是他们知道当前的位置离食物还有多远。 那么找到食物的最优策略是什么呢。 最简单有效的就是搜寻目前离食物最近的鸟的周围区域。\nPSO 从这种模型中得到启示并用于解决优化问题。 PSO 中，每个优化问题的解都是搜索空间中的一只鸟。 我们称之为“粒子”。 所有的粒子都有一个由被优化的函数决定的适应值（fitness value），每个粒子还有一个速度决定他们飞翔的方向和距离。 然后粒子们就追随当前的最优粒子在解空间中搜索。\nPSO 算法是基于群体的，根据对环境的适应度将群体中的个体移动到好的区域。 然而它不对个体使用演化算子，而是将每个个体看作是\\(D\\)维搜索空间中的一个没有体积的微粒（点），在搜索空间中以一定的速度飞行，这个速度根据它本身的飞行经验和同伴的飞行经验来动态调整。 第\\(i\\)个微粒表示为\\(X_i = (x_{i1}, x_{i2}, \u0026hellip;, x_{iD})\\)，它经历过的最好位置（有最好的适应值）记为\\(P_i = (p_{i1}, p_{i2}, \u0026hellip;, p_{iD})\\)，也称为 \\(pBest\\) 。 在群体所有微粒经历过的最好位置的索引号用符号\\(g\\)表示，即\\(P_g\\)，也称为\\(gBest\\)。 微粒\\(i\\)的速度用\\(V_i = (v_{i1}, v_{i2}, \u0026hellip;, v_{iD})\\)表示。 对每一代，它的第\\(d\\)维\\((1 ≤ d ≤ D)\\)根据如下方程进行变化：\n\\(v_{id} = w \\cdot v_{id} + c_1 \\cdot rand() \\cdot (p_{id} - x_{id}) + c_2 \\cdot rand() \\cdot (p_{gd} - x_{id})\\)\n\\(x_{id} = x_{id} + v_{id}\\)\n其中\\(w\\)为惯性权重（Inertia Weight），\\(c_1\\)和\\(c_2\\)为加速常数（Acceleration Constants），rand()为在[0,1]范围里变化的随机值。 此外，微粒的速度\\(V_i\\)被一个最大速度\\(V_{max}\\)所限制。 如果当前对微粒的加速导致它的在某维的速度\\(v_{id}\\)超过该维的最大速度\\(v_{max,d}\\)，则该维的速度被限制为该维最大速度\\(v_{max,d}\\)。\n算法流程 初始化一群微粒（群体规模为\\(m\\)），包括随机的位置和速度； 评价每个微粒的适应度； 对每个微粒，将它的适应值和它经历过的最好位置\\(pBest\\)的作比较，如果较好，则将其作为当前的最好位置\\(pBest\\)； 对每个微粒，将它的适应值和全局所经历最好位置\\(gBest\\)的作比较，如果较好，则重新设置\\(gBest\\)的索引号； 根据上述方程变化微粒的速度和位置； 如未达到结束条件（通常为足够好的适应值或达到一个预设最大代数\\(G_{max}\\)），回到 2。 ","description":"","id":9,"section":"posts","tags":["particle-swarm-optimization","heuristic-algorithm"],"title":"粒子群算法","uri":"https://stksgarcia.github.io/posts/particle-swarm-optimization/"},{"content":"Java 8 的一个重要新特性就是 Stream。 Stream 是用函数式编程方式在集合类上进行复杂操作的工具，其集成了 Java 8 中的众多新特性之一的聚合操作，开发者可以更容易地使用 Lambda 表达式，并且更方便地实现对集合的查找、遍历、过滤以及常见计算等。\n学习资料\nJava 8 系列之 Stream 的基本语法详解 Java 8 系列之 Stream 的强大工具 Collector Java 8 系列之重构和定制收集器 Java 8 系列之 Stream 中万能的 reduce ","description":"","id":10,"section":"posts","tags":["java"],"title":"Java 8 Stream 语法","uri":"https://stksgarcia.github.io/posts/java-8-stream/"},{"content":"在国内 Git clone 仓库奇慢无比，通过以下配置可以提升下载速度。\n1 git config --global http.postBuffer 524288000 ","description":"","id":11,"section":"posts","tags":["git"],"title":"Git Clone 下载速度慢的解决方法","uri":"https://stksgarcia.github.io/posts/git-clone-slow-solution/"},{"content":"记录一些 Scala 的学习资料，感谢@hongjiang_wang 的整理。 原帖地址\nAkka Actor 里的偏函数与性能 Patterns.ask 是使用一个临时创建的 actor 发消息而非自身 对 actor 的邮箱计数 Never ever block an actor 模式匹配 话说模式匹配(1) 什么是模式？ 话说模式匹配(2) scala 里是怎么实现的? 话说模式匹配(3) 模式匹配的核心功能是解构！ 话说模式匹配(4) 赋值语句与模式匹配 话说模式匹配(5) for 表达式中的模式匹配 话说模式匹配(6) case 类的细节 话说模式匹配(7) 一个构造器模式的例子(by case class) 话说模式匹配(8) 一个抽取器的例子 类型相关 scala 类型系统：1) 类型与类 scala 类型系统：2) classOf 与 getClass 方法的差异 scala 类型系统：3) 单例类型 scala 类型系统：4) 内部类，路径依赖类型\u0026amp;类型投影 scala 类型系统：5) 结构类型 scala 类型系统：6) 复合类型与 with 关键字 scala 类型系统：7) 中缀类型 scala 类型系统：8) type 关键字 scala 类型系统：9) this 别名\u0026amp;自身类型 scala 类型系统：10) 交集类型与联合类型 scala 类型系统：11) upper bounds \u0026amp; lower bounds scala 类型系统：12) view bounds scala 类型系统：13) context bounds scala 类型系统：14) multiple bounds scala 类型系统：15) 协变与逆变 scala 类型系统：16) 函数类型 scala 类型系统：17) 结构类型的细节问题 scala 类型系统：18) 不稳定(volatile)类型 scala 类型系统：19) Manifest 与 TypeTag scala 类型系统：20) 数组类型 scala 类型系统：21) type specialization 与类爆炸 scala 类型系统：22) 类型约束与特定方法 scala 类型系统：23) 用类型证明实现联合类型 scala 类型系统：24) 理解 higher-kinded-type scala 类型系统：25) type lambda scala 类型系统：26) type classes 模式 scala 类型系统：27) 回顾常见的 type classes scala 类型系统：28) 依赖类型 scala 类型系统：case class 与代数数据类型 scala 类型系统：类型推导 scala 类型系统：柯里-霍华德同构 scala 类型系统：值类型与数组 scala 类型系统：Null 与 Nothing，造型问题 scala 类型系统：值类型的细节 scala 类型系统：通用特质(universal traits) scala 类型系统：值类型的装箱问题 scala 类型系统：值类型的一些限制 Shapeless shapeless(1): 从方法与函数的多态谈起 shapeless(2): 对函数(值)实现参数化多态 类型推导相关 泛型方法转换为部分应用函数时的类型推导问题 Spray spray 中的 Magnet 模式: typeclass 的一种特定方式 Monads \u0026amp; Monoids 我所理解的 monad(0) 我所理解的 monad(1)：半群(semigroup)与幺半群(monoid) 我所理解的 monad(2)：fold 与 monoid 我所理解的 monad(3)：半群(semigroup)与并行运算 我所理解的 monad(4)：函子(functor)是什么 我所理解的 monad(5)：自函子(Endofunctor)是什么 我所理解的 monad(6)：从组合子(combinator)说起 我所理解的 monad(7)：把 monad 看做行为的组合子 翻译\u0026amp;笔记 Programming in Scala 的阅读笔记 Effective Scala 中文版 翻译 monads-are-elephants 第一部分 翻译 monads-are-elephants 第二部分 翻译 monads-are-elephants 第三部分 Scala pitfalls scala 雾中风景(0): 序 scala 雾中风景(1): lambda 表达式的缩写 scala 雾中风景(2): 小括号与花括号 scala 雾中风景(3): for 表达式的背后 scala 雾中风景(4): Unit 类型 scala 雾中风景(5): 中缀表达 scala 雾中风景(6): 内部类与模式匹配 scala 雾中风景(7): val x:Int = x + 1 的问题 scala 雾中风景(8): 高阶函数与 Unit 的谜题 scala 雾中风景(9): List(1,2,3) == Seq(1,2,3) ? scala 雾中风景(10): 逆变点与协变点 scala 雾中风景(11): isInstanceOf 与类型擦拭 scala 雾中风景(12): App 特质的延迟初始化 scala 雾中风景(13): 模式匹配中的逻辑或 scala 雾中风景(14): trait 的泛型参数为何不支持 context bounds scala 雾中风景(15): class A { type T }与 class A[T] {} scala 雾中风景(16): println(1,2,3)为什么 work? scala 雾中风景(17): toSet()的谜题 scala 雾中风景(18): postfix operator 的问题 scala 雾中风景(19): MutableList 与 mutable.LinkedList 的问题 scala 雾中风景(20): MutableList 迭代器的 bug scala 雾中风景(21): auto-tupling 与 auto-detupling scala 雾中风景(22): var 变量与赋值操作符 scala 雾中风景(23): Nothing 类型引发的 NullPointerException scala 雾中风景(24): break 与异常捕获 scala 雾中风景(25): try-finally 表达式的类型推导 scala 雾中风景(26): 变量查找的问题 诊断 scala 的诊断方法(1) 使用-Xprint:typer 看语法糖的背后 scala 的诊断方法(2) 在 repl 下用 reify 查看表达式的翻译结果 scala 的诊断方法(3) 在 repl 下统计方法的执行时间 scala 的诊断方法(4) -Ytyper-debug 编译项 scala 的诊断方法(5) 用 scalac-aspects 诊断 scalac 各阶段耗时 函数与函数式风格 无参方法与小括号问题 scala 中的无参方法与统一访问原则 scala 中的 eta-conversion 闭包变量绑定问题 如何写一段符合 scala 语言习惯的快速排序 Any.##方法与 hashCode 的区别 scala 中的有名参数 map 函数，隐式参数 CanBuildFrom 的细节 scala 中函数类型的多态 scala 不是函数式语言，与 Ocaml 的对比 foldLeft 与 foldRight 再谈 eta-conversion 与 eta-expansion 柯里化(currying)与构造器(Builder)模式 集合相关 对 tuple 进行迭代 String 当作集合处理时的方法 scala 中集合的交集、并集、差集 Tuple1 的存在意义？ 为什么 scala 中的 tuple 定义了 22 个(Tuple22)? 二元组箭头表达式背后的语法糖 通过 List.apply 方法构造 List 的背后逻辑 API pitfalls scala 类库中的 api 陷阱(1): LinkedList.append REPL 相关 repl 杂记 repl 下的几种模式 repl 下的 javap scala2.11 的 repl 下增加了 kind 命令 Scala 2.10+ scala2.10 中 eval 一段 script scala2.10.1 的 repl 下:cp 命令不能工作 scala2.10 中采纳了 SIP-18:模块化语言特性 scala2.10 里的 for 表达式已经不允许对变量声明 val scala2.11 编译环节的一些变动: delambdafy scala2.11 编译器对 lint 的增强 未分类 lazy 变量与双重检测锁(DCL) scala 里的静态代理(static-forwarders) 统计诗经中最常使用的叠词 scala2.9 中@serializable 注释已不鼓励使用 import root.xxx 中的_root_前缀表示 xxx 包名是绝对路径 scala 中执行外部命令(scala.sys.process) classloader 问题：import my.package._ 是否会 load 该包下所有的 class? scala 中有 Unicode 的关键字 Any 类的源码在哪儿？ scala 编译器的一个 bug scala bug 系列：2.10 编译器把单例当作类型的 bug scala 里模拟 javascript/python 里的生成器的效果 null 造型为值类型时为何不抛异常 Int 与 Integer 的拆箱问题 Scala 函数式编程中文版已上架 scalastyle 工具 分享与交流 分享 ppt: scala 中的函数与闭包 与 19 楼的交流 上海 scala 爱好者聚会(2013) 阿里技术嘉年华 2013 2013 华东 scala 爱好者聚会(杭州) 华东地区 scala 爱好者聚会(2014 上海) 华东地区 scala 爱好者聚会(2015 上海) Scala 在挖财的应用实践 ArchSummit 北京 2015 小记 依赖注入 Cake Pattern 与依赖注入 scala 中的 self type(自身类型)与依赖注入 ","description":"","id":12,"section":"posts","tags":["scala"],"title":"Scala 学习资料","uri":"https://stksgarcia.github.io/posts/scala-materials/"},{"content":"Sometimes we need to parse strings like this:\n1 \u0026#34;1234567890\u0026#34;,\u0026#34;James\u0026#34;,man,\u0026#34;New York, NY, USA\u0026#34; And the output we need is as follows:\n1 2 3 4 \u0026#34;1234567890\u0026#34; \u0026#34;James\u0026#34; man \u0026#34;New York, NY, USA\u0026#34; We can try the following code:\n1 2 3 String line = \u0026#34;\\\u0026#34;1234567890\\\u0026#34;,\\\u0026#34;James\\\u0026#34;,man,\\\u0026#34;New York, NY, USA\\\u0026#34;\u0026#34;; String[] tokens = line.split(\u0026#34;,(?=(?:[^\\\u0026#34;]*\\\u0026#34;[^\\\u0026#34;]*\\\u0026#34;)*[^\\\u0026#34;]*$)\u0026#34;, -1); Arrays.stream(tokens).forEach(System.out::println); In other words: split on the comma only if that comma has zero, or an even number of quotes ahead of it.\nA bit friendlier for the eyes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 String line = \u0026#34;\\\u0026#34;1234567890\\\u0026#34;,\\\u0026#34;James\\\u0026#34;,man,\\\u0026#34;New York, NY, USA\\\u0026#34;\u0026#34;; String otherThanQuote = \u0026#34; [^\\\u0026#34;] \u0026#34;; String quotedString = String.format(\u0026#34; \\\u0026#34; %s* \\\u0026#34; \u0026#34;, otherThanQuote); String regex = String.format(\u0026#34;(?x) \u0026#34;+ // enable comments, ignore white spaces \u0026#34;, \u0026#34;+ // match a comma \u0026#34;(?= \u0026#34;+ // start positive look ahead \u0026#34; (?: \u0026#34;+ // start non-capturing group 1 \u0026#34; %s* \u0026#34;+ // match \u0026#39;otherThanQuote\u0026#39; zero or more times \u0026#34; %s \u0026#34;+ // match \u0026#39;quotedString\u0026#39; \u0026#34; )* \u0026#34;+ // end group 1 and repeat it zero or more times \u0026#34; %s* \u0026#34;+ // match \u0026#39;otherThanQuote\u0026#39; \u0026#34; $ \u0026#34;+ // match the end of the string \u0026#34;) \u0026#34;, // stop positive look ahead otherThanQuote, quotedString, otherThanQuote); String[] tokens = line.split(regex, -1); Arrays.stream(tokens).forEach(System.out::println); About split(String regex, int limit) method.\nThe limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.\nIf the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array\u0026rsquo;s length will be no greater than n, and the array\u0026rsquo;s last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string \u0026ldquo;boo:and:foo\u0026rdquo;, for example, yields the following results with these parameters:\nRegex Limit Result : 2 { \u0026ldquo;boo\u0026rdquo;, \u0026ldquo;and:foo\u0026rdquo; } : 5 { \u0026ldquo;boo\u0026rdquo;, \u0026ldquo;and\u0026rdquo;, \u0026ldquo;foo\u0026rdquo; } : -2 { \u0026ldquo;boo\u0026rdquo;, \u0026ldquo;and\u0026rdquo;, \u0026ldquo;foo\u0026rdquo; } o 5 { \u0026ldquo;b\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;:and:f\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026quot;\u0026quot; } o -2 { \u0026ldquo;b\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;:and:f\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026quot;\u0026quot; } o 0 { \u0026ldquo;b\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;:and:f\u0026rdquo; } Stack Overflow Java Doc ","description":"","id":13,"section":"posts","tags":["regex","java"],"title":"[Java] Splitting a comma-separated string but ignoring commas in quotes","uri":"https://stksgarcia.github.io/posts/split-a-comma-separated-string/"},{"content":"前几天 JDK 10 正式发布了，距离上一次 JDK 9 发布才没几周时间，但是 JDK 10 还是更新了许多新特性。 下面介绍一下几个比较重要的新特性。\n局部变量类型推断 对于开发者来说，这是 JDK 10 唯一的真正特性。 它向 Java 中引入在其他语言中很常见的 var ，比如 JavaScript。 只要编译器可以推断此种类型，你不再需要专门声明一个局部变量的类型。 一个简单的例子是：\n1 var x = new ArrayList(); 首先，Java 的 var 和 JavaScript 的完全不同，不要这样去类比。 Java 的 var 是用于局部类型推断的，而不是 JS 那样的动态类型，所以下面这个样子是不行的：\n1 2 var a = 10; a = \u0026#34;abc\u0026#34;; //error! 其次，这个 var 只能用于局部变量声明，在其他地方使用都是错误的。\n1 2 3 4 5 6 class C { public var a = 10; //error public var f() { //error return 10; } } 所以 var 并不会对库的接口产生影响，影响的只可能是内部的实现。\n还有些人觉得 var 只是一个简单的语法糖，用来少打几个字符。 但其实并不仅仅是这样， var 还能够用来弥补 Java 8 lambda 表达式的缺陷。\n我们知道 Java 8 的 lambda 表达式不能够捕获可变变量，也就是说下面这个代码是错误的：\n1 2 3 int count = 0; List.of(\u0026#34;ice1000\u0026#34;, \u0026#34;Glavo\u0026#34;).forEach(e -\u0026gt; count += 1); //error System.out.println(count); 之前想要绕过这个限制，我们可以用单元素的数组实现。 而在 Java 10 中我们又多了一种选择：\n1 2 3 4 5 var context = new Object() { int count = 0; } List.of(\u0026#34;ice1000\u0026#34;, \u0026#34;Glavo\u0026#34;).forEach(e -\u0026gt; context.count += 1); System.out.println(context.count); 除了帮助我们捕获可变参数， var 还能够帮助我们实现嵌套函数：\n1 2 3 4 5 6 7 8 9 10 11 int factorial(int i) { var context = new Object() { int fact(int i, int accumulator) { if (i \u0026lt;= 1) return accumulator; else return fact(i - 1, i * accumulator); } }; return context.fact(i, 1); } 在使用长的 Stream 操作链的时候，我们也可以把一些操作放在 context 中，从而简化操作链，增强可读性：\n1 2 3 4 5 6 7 8 9 int[] parseAndLogInts(List\u0026lt;String\u0026gt; list, int radix) { var context = new Object() { int parseAndLogInt(String str) { System.out.println(str); return Integer.parseInt(str, radix); } }; return list.stream().mapToInt(context::parseAndLogInt).toArray(); } 为了兼容原有代码， var 不是一个关键字，而是一个保留类型，这意味着你还是能像这样 var 当做一个变量名：\n1 2 3 void f() { int var = 10; } var 还有一个特殊的特性：在用匿名内部类初始化 var 声明的变量时，这个变量会被推断成一个局部的类型，所以你可以这样：\n1 2 3 4 5 6 final var o = new Object() { public void f() { System.out.println(\u0026#34;Hello world!\u0026#34;); } }; o.f(); 注意我们用 final var 声明了不可变变量 o ，不过其实就算不用 final var 声明，你也不能把 o 赋值为它的初始值和 null 以外的任何值。\n并行全垃圾回收器 G1 G1 是设计来作为一种低延时的垃圾回收器（但是如果它跟不上旧的堆碎片产生的提升速率的话，将仍然采用完整压缩集合）。 在 JDK9 之前，默认的收集器是并行，吞吐，收集器。 为了减少在使用默认的收集器的应用性能配置文件的差异，G1 现在有一个并行完整收集机制。\nJDK 10 的 109 项新特性 如何评价 JDK 10？ ","description":"","id":14,"section":"posts","tags":["java"],"title":"JDK 10 新特性","uri":"https://stksgarcia.github.io/posts/jdk-10-new-features/"},{"content":"当我们下载了一部电视剧或是动漫时，通常文件名非常长，会包含视频的分辨率、字幕组等信息，但是我们通常只会关心这是第几集。。。\n于是就开始寻找 Windows 下批量重命名的方法。 虽然 Windows 下的命令行没有 Linux 下方便，但是还是提供了必备的功能。\n以下就是通过 Powershell 实现批量正则重命名文件。\n1 Get-ChildItem *.mp4 | Rename-Item -NewName { $_.name -replace \u0026#39;.*Vol\\.([0-9]{1}).*\u0026#39;, \u0026#39;Video_$1.mp4\u0026#39; } 其中管道前是列出所有 mp4 文件。 Rename-Item 的一般形式是 Rename-Item -Path \u0026lt;String\u0026gt; -NewName \u0026lt;String\u0026gt; 。 大括号内是通过正则替换字符串。\n另外 Get-ChildItem 的别名是 ls ， Rename-Item 的别名是 rni 。\n","description":"","id":15,"section":"posts","tags":["powershell","windows"],"title":"Windows 下使用 Powershell 批量重命名文件","uri":"https://stksgarcia.github.io/posts/powershell-bulk-rename/"},{"content":"N 皇后问题 首先介绍八皇后问题。八皇后问题是一个以国际象棋为背景的问题：如何能够在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？ 为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。\n八皇后问题可以推广为更一般的 N 皇后摆放问题：这时棋盘的大小变为 N×N 。\n遗传算法 遗传算法（Genetic Algorithm, GA）是借鉴生物界自然选择和自然遗传机制的启发式搜索算法。 它模拟一个人工种群的进化过程，通过选择、交叉以及变异等机制，在每次迭代中都保留一组候选个体，重复此过程，种群经过若干代进化后，理想情况下其适应度达到近似最优的状态。\n算法过程 总结一下是下列几个步骤：\n初始化种群（Initial population） 计算适应度（Fitness function） 选择（Selection） 交叉（Crossover） 变异（Mutation） 用伪代码来描述就是：\n1 2 3 4 5 6 7 8 9 10 START Generate the initial population Compute fitness REPEAT Selection Crossover Mutation Compute fitness UNTIL population has converged STOP 编码与解码 实现遗传算法的第一步就是明确对求解问题的编码和解码方式。\n一般有两种编码方式，各具优缺点：\n实数编码：直接用实数表示基因，容易理解且不需要解码过程，但容易过早收敛，从而陷入局部最优。 二进制编码：稳定性高，种群多样性大，但需要的存储空间大，需要解码且难以理解。 在本问题中可以采用实数编码，例如，当 N = 8 时，其中一个编码可以是 78563412 ，其中每一个数字的位置代表皇后在棋盘上的行数，每一个值代表皇后在当前行中所出列的位置。 比如 6 代表该皇后在棋盘的第 4 行第 6 列。\n个体与种群 “染色体”表达了某种特征，这种特征的载体，称为“个体”。 许多这样的个体组成了一个种群。\n适应度函数 遗传算法中，一个个体（解）的好坏用适应度函数值来评价。 在本问题中，有多少皇后满足要求就是适应度函数。\n适应度函数值越大，解的质量越高。 适应度函数是遗传算法进化的驱动力，也是进行自然选择的唯一标准，它的设计应结合求解问题本身的要求而定。\n选择 选择操作是从前代种群中选择多对较优个体，一对较优个体称之为一对父母，让父母们将它们的基因传递到下一代，直到下一代个体数量达到种群数量上限。\n在选择操作前，将种群中个体按照适应度从小到大进行排列。\n采用轮盘赌选择方法（当然还有很多别的选择方法），各个个体被选中的概率与其适应度函数值大小成正比。 轮盘赌选择方法具有随机性，在选择的过程中可能会丢掉较好的个体，所以可以使用精英机制，将前代最优个体直接选择。\n在本问题中，直接将适应度最高的两个个体作为父母。\n交叉 两个待交叉的不同的染色体（父母）根据交叉概率按某种方式交换其部分基因。 一般来说交叉概率比较大。\n可以采用单点交叉法，也可以使用其他交叉方法，应根据实际情况定义合适的交叉算法。\n变异 染色体按照变异概率进行染色体的变异。一般来说变异概率比较小。\n可以采用单点变异法，也可以使用其他变异方法。\nJava 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 import java.util.*; import java.util.stream.Collectors; public class Queen { private static int N = 10; private static double RATE = 0.3; public static void main(String[] args) { Queen queen = new Queen(); HashSet\u0026lt;String\u0026gt; result = new HashSet\u0026lt;\u0026gt;(); int[] father = queen.init(); int[] mother = queen.init(); int times = 3000000; for (int i = 0; i \u0026lt; times; i++) { List\u0026lt;Integer[]\u0026gt; son = new ArrayList\u0026lt;\u0026gt;(); for (int j = 0; j \u0026lt; N; j++) { son.add(Arrays.stream(queen.crossover(father, mother)).boxed().toArray(Integer[]::new)); } son = queen.mutation(son); Map\u0026lt;Integer[], Integer\u0026gt; res = queen.selection(son); for (Map.Entry\u0026lt;Integer[], Integer\u0026gt; c : res.entrySet()) { if (c.getValue() == 0) result.add(Arrays.toString(c.getKey())); } father = Arrays.stream(res.entrySet().iterator().next().getKey()).mapToInt(k -\u0026gt; k).toArray(); mother = Arrays.stream(res.entrySet().iterator().next().getKey()).mapToInt(k -\u0026gt; k).toArray(); } System.out.println(\u0026#34;Solutions: \u0026#34; + result.size()); } private int[] init() { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int i = 1; i \u0026lt;= N; i++) list.add(i); Collections.shuffle(list); return list.stream().mapToInt(i -\u0026gt; i).toArray(); } private int[] crossover(int[] originFather, int[] originMother) { int[] father = Arrays.copyOf(originFather, N); int[] mother = Arrays.copyOf(originMother, N); int[] rend = new int[N]; for (int i = 0; i \u0026lt; N; i++) { rend[i] = Math.random() \u0026gt;= 0.5 ? 0 : 1; } int[] son = new int[N]; int f = 0, m = 0; for (int i = 0; i \u0026lt; N; i++) { if (rend[i] == 0) { for (f = 0; f \u0026lt; N; f++) if (father[f] != 0) break; } else { for (m = 0; m \u0026lt; N; m++) if (mother[m] != 0) break; } son[i] = rend[i] == 0 ? father[f] : mother[m]; for (int j = 0; j \u0026lt; N; j++) { if (father[j] == son[i]) father[j] = 0; if (mother[j] == son[i]) mother[j] = 0; } } return son; } private List\u0026lt;Integer[]\u0026gt; mutation(List\u0026lt;Integer[]\u0026gt; chromosomes) { for (Integer[] chromosome : chromosomes) { if (Math.random() \u0026lt; RATE) continue; int i = (int) (Math.random() * N); int j = (int) (Math.random() * N); if (i == j) continue; chromosome[i] ^= chromosome[j]; chromosome[j] ^= chromosome[i]; chromosome[i] ^= chromosome[j]; } return chromosomes; } private Integer fitness(Integer[] result) { int res = 0; for (int i = 0; i \u0026lt; N; i++) { for (int j = i + 1; j \u0026lt; N; j++) { if (Math.abs(result[i] - result[j]) == j - i) res++; } } return res; } private Map\u0026lt;Integer[], Integer\u0026gt; selection(List\u0026lt;Integer[]\u0026gt; son) { Map\u0026lt;Integer[], Integer\u0026gt; result = son.stream().collect(Collectors.toMap(x -\u0026gt; x, this::fitness)); result = result.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -\u0026gt; oldValue, LinkedHashMap::new)); return result; } } N 皇后解的个数 N Solutions 1 1 2 0 3 0 4 2 5 10 6 4 7 40 8 92 9 352 10 724 11 2680 12 14200 13 73712 14 365596 15 2279184 16 14772512 17 95815104 18 666090624 19 4968057848 20 39029188884 21 314666222712 22 2691008701644 23 24233937684440 24 227514171973736 25 2207893435808352 知乎 - 如何通俗易懂地解释遗传算法？有什么例子？ ","description":"","id":16,"section":"posts","tags":["genetic-algorithm"],"title":"用遗传算法求解 N 皇后问题","uri":"https://stksgarcia.github.io/posts/solving-n-queens-problem-with-genetic-algorithm/"},{"content":"之前写项目的时候需要通过 Java API 实现 Consumer 每次都从最开始消费，也就是将 Kafka topic 下所有 partition 的 offset 重置到最初位置。\n这个功能类似 shell 下的命令：\n1 ./kafka-console-consumer.sh --bootstrap-server serverip:9092 --topic topic --from-beginning Kafka 的 JavaDoc 中提到可以使用 seekToBeginning(Collection\u0026lt;TopicPartition\u0026gt;) 方法来实现 --from-beginning 的功能，但是文档中没有详细说明如何使用，只是提及这个方法“evaluates lazily”， 只有在调用 poll(long) 或 position(TopicPartition) 的时候才重置 offset 到开头。 所以直接在 subscribe(Pattern pattern) 后调用是不起作用的。\n正确的方法应该是在 Partition 分配后的回掉函数中重置 offset，具体代码如下：\n1 2 3 4 5 6 7 8 9 10 consumer.subscribe(Collections.singletonList(topic), new ConsumerRebalanceListener() { @Override public void onPartitionsRevoked(Collection\u0026lt;TopicPartition\u0026gt; partitions) { } @Override public void onPartitionsAssigned(Collection\u0026lt;TopicPartition\u0026gt; partitions) { consumer.seekToBeginning(partitions); } }); ","description":"","id":17,"section":"posts","tags":["kafka","java"],"title":"通过 Java API 实现 Kafka Consumer 从最开始消费","uri":"https://stksgarcia.github.io/posts/kafka-consume-data-from-the-beginning/"},{"content":"有时候我们需要通过 Gradle 将依赖打包进 Jar 包中，下面代码中的 fatJar 任务可以实现此功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 group \u0026#39;com.example\u0026#39; version \u0026#39;0.1.0\u0026#39; apply plugin: \u0026#39;java\u0026#39; sourceCompatibility = 1.8 repositories { mavenCentral() } dependencies { compile fileTree(dir: \u0026#39;lib\u0026#39;, include: \u0026#39;*.jar\u0026#39;) compile group: \u0026#39;org.apache.kafka\u0026#39;, name: \u0026#39;kafka-clients\u0026#39;, version: \u0026#39;1.0.0\u0026#39; compile group: \u0026#39;org.slf4j\u0026#39;, name: \u0026#39;slf4j-simple\u0026#39;, version: \u0026#39;1.7.25\u0026#39; testCompile group: \u0026#39;junit\u0026#39;, name: \u0026#39;junit\u0026#39;, version: \u0026#39;4.12\u0026#39; } tasks.withType(JavaCompile) { options.encoding = \u0026#34;UTF-8\u0026#34; } task fatJar(type: Jar) { manifest { attributes \u0026#39;Main-Class\u0026#39;: \u0026#39;com.example.stk.Main\u0026#39; } from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } with jar } 另外， dependencies 代码块中的 fileTree 用于将外部的依赖包通过 Gradle 管理。\nattributes 'Main-Class': 'com.example.stk.Main' 指定 Jar 包的主类。\n","description":"","id":18,"section":"posts","tags":["gradle"],"title":"通过 Gradle 打包外部依赖","uri":"https://stksgarcia.github.io/posts/package-dependency-via-gradle/"},{"content":"我之前一个版本的博客也是托管在 GitHub 的静态博客，使用的是Jekyll。 但是它提供的主题不是很符合我的口味，所以就去网上找了许多模板，最终使用了 Hux 的模板（主页|项目）。 虽然样式挺美观且简洁，但是可扩展性不强，更新起来麻烦。 如果要使用的话需要自己改很多文件。 于是最终放弃了 Jekyll 转到了 Hexo 阵营。\nHexo 是基于 Node.js 的博客框架，在 Windows 下只需要安装 Node.js 就可以写博客了，而不像 Jekyll 需要安装 Ruby 和其他依赖，另外 Ruby 对 Windows 也不友好。 Hexo 的开源贡献者有一大部分是国人，所以有中文文档（文档写的有点简略啊）。 最主要的是Next 主题好看，容易配置和更新。\n","description":"","id":19,"section":"posts","tags":["blog"],"title":"从 Jekyll 到 Hexo","uri":"https://stksgarcia.github.io/posts/migration-from-jekyll-to-hexo/"},{"content":"This is a simple description of popular free software license made by Paul Miller.\nChoosing an open source license can be really confusing. Fortunately, GitHub has created ChooseALicense.com to help us make that decision.\n","description":"","id":20,"section":"posts","tags":["license","open-source"],"title":"How to choose an open source license?","uri":"https://stksgarcia.github.io/posts/choose-an-open-source-license/"},{"content":"之前想用中文写 LaTeX，查了几次总是忘记，在此记录。\n只要在文件开头加入以下代码：\n1 2 % !TEX program = xelatex \\documentclass{ctexart} ","description":"","id":21,"section":"posts","tags":["latex"],"title":"编译中文 LaTeX","uri":"https://stksgarcia.github.io/posts/compile-latex-in-chinese/"},{"content":"在今年的 9 月 10 至 11 日，有幸获得导师的邀请，参加了全球运维技术大会。 这篇博客记录了会上一些有意思的内容。 文章写的比较随意，主要是给自己看~(￣ ▽ ￣)~*\n开场 主持人介绍了运维的演变过程。\n运维的演变：SA → Ops → DevOps → SRE\n运维平台的演变：流程化 → 工具化 → Web 化 → 自动化 → 智能化\n最后提了新运维下的热门技术：\nDevOps AIOps Serverless SRE 智能化运维 自动化运维 为什么说 AIOps 是未来，百度的思考与实践 百度做了一个运维自动化的能力分级，类似于 CMMI。\n基于日志 trace 的智能故障定位系统 日志抽样的方式：\n匀质抽样 异常抽样 人工抽样 CNUTCon 夜聊：谈谈智能时代的新运维 阿里许晓斌讲师认为：需要智能化运维是因为应用程序不易运维。 他更关注 Cloud Native。 与其运维系统做的好，不如应用更好的去适应云。\n微服务场景下的 Serverless 架构实践 什么是 Serverless：\nServerless 的优缺点以及未来：\n日志管理平台：\n天猫 DevOps 转型实践 天猫内部正在编写给新人的 DevOps 权威指南。 我们很希望能得到天猫的支持，但是很遗憾，文档仅供内部使用，并不开放。\n基于虚拟化的 CI/CD 流程与基础架构建设 美团使用 Jenkins 作为 CI 服务器的原因：\n开源，插件开发成本低。 社区活跃，技术成熟，培训成本低。 安全性。可以部署在私有系统上。 为什么要自研部署系统：\n部署场景比较复杂，需要适应实际的业务需求，特别是关系到生产环境，现有的系统不合适。 而 Jenkins 作为 CI 系统满足了大部分需求，各个厂商都差不多。 全方位的监控与智能透明的自动化运维 一些日志工具：\n其中 graylog 可以根据需求拉取特定日志。\nChatOps 可以方便移动运维。 IBM 有 70% 的时间在用 Chatbot。\nCNUTCon 2017 官网 →\n","description":"","id":22,"section":"posts","tags":["aiops","devops"],"title":"智能时代的新运维「CNUTCon 2017 上海」","uri":"https://stksgarcia.github.io/posts/cnutcon2017/"},{"content":"最近 AIOps 非常火，加上之前对 DevOps 做了一些研究，现在找了一些带有 Ops 的词，在此做了一些整理。\nDevOps DevOps（英文 Development 和 Operations 的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。 它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。\nAIOps AIOps，也就是基于算法的 IT 运维（Algorithmic IT Operations），是由 Gartner 定义的新类别，源自业界之前所说的 ITOA (IT Operations and Analytics)。 我们已经到达了这样的一个时代，数据科学和算法正在被用于自动化传统的 IT 运维任务和流程。 算法被集成到工具里，帮助企业进一步简化运维工作，把人类从耗时又容易出错的流程中解放出来。人们不再需要在遗留的管理系统中定义和管理无穷无尽的规则和过滤器。\nWhat are algorithmic IT operations (AIOps)? AIOps 是什么？它与 AI 有什么关系？ DevSecOps DevSecOps 是糅合了开发、安全及运营理念以创建解决方案的全新方法，是 DevOps 与 SecOps 的结合。 DevSecOps 的作用和意义建立在 每个人都对安全负责 的理念之上，其目标是在不影响安全需求的情况下快速的执行安全决策，将决策传递至拥有最高级别环境信息的人员。\nDevSecOps 宣言：\nCIO 驱动 不同团队间的相互协作 专注于风险，而非安全 What is DevSecOps? The DevOps concept: NoOps, DataOps and what comes next DevSecOps 简介（一） 什么是 DevSecOps？系列（一） BizDevOps BizDevOps，也被称作 DevOps 2.0，是一种鼓励开发、运维和业务团队携手合作的软件开发方式，使组织能够更快地开发软件，更好地响应用户需求，最终实现收益最大化。\nBizDevOps (Business, Development and Operations) DataOps DataOps (data operations) 是一种设计、实施和维护分布式数据架构的方法，这些数据架构支持实际生产中大多数的开源工具和框架。 受 DevOps 运动的启发，DataOps 力求加快运行在大数据处理框架上的应用生产。 像 DevOps 一样，DataOps 旨在打破 IT 运维和软件开发团队的壁垒，鼓励业界利益相关者同数据工程师，数据科学家和分析师之间的合作，以最灵活，最有效的方式使用该组织的数据来实现正面的业务成果。\nDataOps (data operations) The DevOps concept: NoOps, DataOps and what comes next Wiki NoOps NoOps (no operations) 是一种理念，IT 环境可以从基础架构进行自动化和抽象化，不需要专门的团队来管理内部软件。 在 NoOps 场景下，维护和一些其他的由运维执行的任务将会被自动实施。 NoOps 背后的两个主要驱动力是 IT 自动化和云计算。\nNoOps The DevOps concept: NoOps, DataOps and what comes next ChatOps ChatOps 在 GitHub 上广受赞誉，是指由对话驱动的开发。 将工具植入到对话当中，使用被关键插件和脚本改良过的聊天机器人，团队能够自动执行任务和协作，效果更好、成本更低、速度更快。\n以下是项目经理的观点：在聊天室里，团队成员输入命令来配置机器人，它们通过自定义脚本和插件来执行命令，从代码部署到安全事件响应再到团队成员提醒，范围极广。随着命令被不断执行，整个团队协作也实时进行。\nChatOps ChatOps and VoiceOps make DevOps integration easier than ever DevOps 理念升级，ChatOps 概述及实践经验 ChatOps 是什么？该如何使用呢？ VoiceOps 相对于 ChatOps，VoiceOps 更进了一步，它将虚拟语音助手集成到了运维工具中。\nChatOps and VoiceOps make DevOps integration easier than ever SecOps 同 DevOps 统一开发和运维类似，SecOps 是解决安全团队和运维团队隔阂的管理方法。 SecOps 将安全和运维团队联系起来，共同分担责任，分享流程和使用工具，以此在不牺牲安全性的前提下维持正常运行时间和性能。\nWhat is SecOps? WebOps WebOps (Web operations) 是处理 Web 应用和其支持系统中复杂事务的 IT 系统管理领域。 WebOps 工程领域包括应用部署、管理、维护、配置和修复。\n优秀的 WebOps 工程师会对以下技术有深入的理解：网络、路由、交换、防火墙、负载均衡、高可用、灾难恢复、TCP 和 UDP 服务、NOC 管理、硬件规格、多种不同 UNIX 发行版、多种 Web 服务器技术、缓存技术、多种数据库、存储基础设施、密码学、算法、容量规划。\nWebOps (Web operations) HumanOps HumanOps 是一套关注运行基础设施人力方面的原则。 它强调了运行系统团队的重要性，而不仅仅是系统本身。 基础设施的健康状况不仅仅是硬件、软件、自动化和正常运行时间 —— 它还包括团队的健康和福利。 HumanOps 的目标是改善和保持团队的健康：促进沟通，减少疲劳和减轻压力。\nHumanOps DevOps and HumanOps: Efficiency meets empathy DesignOps 基于 DevOps 的理念和实践，DesignOps 有助于优化开发者和设计师之间的沟通和协作，以便更快的生产更好的产品。\nDesignOps: Bridging the developer, designer communication gap Anti-DevOps Anti-DevOps 是一种反对 DevOps 革命的理念。 已经有 DevOps 的批评者抱怨 DevOps 是在“杀死开发人员”，或者 DevOps 只适用于像 Netflix 和 Google 这样的大型组织。 如果这样的情绪大量聚集，软件组织可能会重新采用传统软件交付模式而推迟 DevOps 的实施。\nThe DevOps concept: NoOps, DataOps and what comes next ","description":"","id":23,"section":"posts","tags":["devops","aiops"],"title":"什么会和“Ops”碰撞出火花？","uri":"https://stksgarcia.github.io/posts/xops/"},{"content":"A good systematic review might achieve most or all of the following (Baumeister \u0026amp; Leary, 1997; Bem, 1995; Cooper, 2003):\nEstablish to what extent existing research has progressed towards clarifying a particular problem; Identify relations, contradictions, gaps, and inconsistencies in the literature, and explore reasons for these (e.g., by proposing a new conceptualisation or theory which accounts for the inconsistency); Formulate general statements or an overarching conceptualization (make a point, rather than summarizing all the points everyone else has made; Sternberg, 1991); Comment on, evaluate, extend, or develop theory; In doing these things, provide implications for practice and policy; Describe directions for future research. ","description":"","id":24,"section":"posts","tags":["slr","research"],"title":"Tips for conducting a Systematic Literature Review","uri":"https://stksgarcia.github.io/posts/tips-for-conducting-a-slr/"},{"content":"读完《Chris Richardson 谈微服务软件架构设计》后在此对一些重要观点进行记录。\n微服务架构的优势与不足 优势：\n通过分解巨大单体应用为多个服务方法解决了复杂性问题。 在功能不变的情况下，应用被分解为多个可管理的分支或服务。 由此，单个服务很容易开发，理解和维护。 这种架构使得每个服务都可以由专门开发团队来开发。 开发者可以自由选择开发技术，提供 API 服务。 微服务架构模式使得每个微服务独立部署，开发者不再需要协调其他服务部署对本服务的影响。 微服务架构模式使得每个服务独立扩展。 不足：\n微服务强调了服务大小。 尽管小服务更乐于被采用，但是不要忘了微服务只是结果，而不是最终目的。 微服务的目的是有效的拆分应用，实现敏捷开发和部署。 微服务应用是分布式系统，由此会带来固有的复杂性。 开发者需要在 RPC 或者消息传递之间选择并完成进程间通讯机制。 分区的数据库架构。 测试基于微服务架构的应用是复杂的任务。 微服务架构模式应用的改变将会波及多个服务，需要考虑相关改变对不同服务的影响。 部署微服务很复杂。 还需要完成一个服务发现机制，以用来发现与它通讯服务的地址。 使用 API 网关构建微服务 API 网关的优缺点 最大的优点是封装了应用程序的内部结构。 简化了客户端代码。\n缺点是增加了一个必须开发、部署和维护的高可用组件。 另外，API 网关成为了开发瓶颈。 更新网关的过程要尽可能简单，否则不得不排队等待。\n实现 API 网关 性能和可扩展性 使用响应式编程模型 服务调用 服务发现 处理局部失败 微服务架构中的进程间通信 交互模式 Type One-to-Many One-to-One Synchronous - Request/response Asynchronous Publish/subscribe Notification Request/async response Publish/async response 处理局部失败 网络超时 限制请求次数 断路器模式（Circuit Breaker Pattern）：记录成功和失败的请求数量。 如果失败率超过阀值则触发一个失效期。 提供回滚 基于消息的异步通信 优点：\n解耦客户端和服务端 消息缓冲：使用消息队列。 客户端-服务端的灵活交互：消息机制支持所有交互模式。 清晰的进程间通信 缺点：\n额外的操作复杂性：消息系统需要单独安装、配置和部署。 消息代理必须高可用。 实现基于请求／响应交互模式的复杂性。 服务发现的可行方案以及实践案例 客户端发现模式 客户端从服务注册服务中查询，其中是所有可用服务实例的库。 客户端使用负载均衡算法从多个服务实例中选择出一个，然后发出请求。\n这一模式相对直接，除了服务注册外其他部分无需变动。 由于客户端知晓可用的服务实例，能针对特定应用实现智能负载均衡，比如哈希一致性。\n一大缺点是客户端与服务注册绑定，要针对服务端用到的每个编程语言和框架实现客户端的服务发现逻辑。\n服务端发现模式 客户端通过负载均衡器向某个服务提出请求，负载均衡器查询服务注册表，并将请求转发到可用的服务实例。 如同客户端发现，服务实例在服务注册表中注册或注销。\n最大优点是客户端无需关注发现的细节，只需要简单的向负载均衡器发送请求，减少了编程语言框架需要完成的发现逻辑。 缺点是除非负载均衡器由部署环境提供，否则会成为一个需要配置和管理的高可用系统组件。\n服务注册的方式 自注册方式\n服务实例负责在服务注册表中注册和注销。 另外，服务实例也要发送心跳来保证注册信息不会过时。\n优点是简单，无需其他系统组件。 缺点是把服务实例和服务注册耦合，必须在每个编程语言和框架内实现注册代码。\n第三方注册模式\n由服务注册器处理会通过查询部署环境或订阅事件的方式来跟踪运行实例的更改。\n优点是服务与服务注册解耦。 缺点是要配置和管理一个高可用的系统组件。\n事件驱动的数据管理 事件驱动的架构 当有显著事件发生时某个微服务会发布事件，其他微服务订阅这些事件。 当某一微服务接收到事件就可以更新自己的业务实体，实现更多事件被发布。\n优点是使得事务跨多个服务并提供最终一致性，也可以让应用维护物化视图。 缺点是编程模型比 ACID 事务复杂。 为了从应用级别的失效中恢复，还需要完成补偿性事务。 要处理临时事务造成的数据不一致。\n实现原子化 例如插入一行数据然后发布事件。 确保原子化的标准做法是使用包含数据库和消息代理的分布式事务。\n使用本地事务发布事件 实现原子化的方法是使用多步骤进程来发布事件，该进程只包含本地事务。\n用一个事件表来充当消息队列。 应用启动一个本地数据库事务，更新业务实体的状态，在事件表中插入一个事件，并提交该事务。 独立的应用线程或进程查询事件表，将事件发到消息代理，然后用本地事务标注事件并发布。\n优点是保证每个更新都有对应的事件发布，并且无需依赖 2PC（两步提交）。 发布业务级别的事件，消除来推断事件的需要。 缺点是开发者必须牢记发布事件。 对 NoSQL 数据库应用是个挑战，NoSQL 本身交易和查询能力有限。\n挖掘数据库事务日志 应用更新数据库，数据库的事务日志记录变更。 事务日志挖掘线程或进程读取这些日志，并发布到消息代理。\n优点是无需 2PC，日志发布与应用业务分离，简化应用。 缺点是事务日志的格式与每个数据库对应。 很难逆向工程业务事件。\n使用事件源 分别存储业务实体和业务状态。\n优点是解决了事件驱动的微服务架构的一个关键问题，能够只要状态改变就可靠的发布事件。 解决了数据一致性问题。 业务逻辑由松耦合的、事件交换的业务实体构成。\n选择微服务部署策略 单主机多服务实例模式 在一台物理或虚拟主机上运行多个服务实例。\n优点：\n资源利用率相对高效，多服务实例共享服务器及操作系统。 部署服务实例更快，只需将服务复制到主机并启动。 开销不多，启动服务通常很快。 缺点：\n除非每个服务实例是一个单独的进程，否则会甚少或者没有隔离。不能限制每个实例使用的资源，很可能一个异常的服务实例会消耗主机所有的内存和 CPU。 所有实例可能共享同一个 JVM 堆，出现异常的服务实例能够轻易中断运行在同一进程的其他服务。 部署服务的运维团队需要了解部署的具体细节，增加率出错的风险。 单主机单服务实例模式 单虚拟机单服务实例模式 优点：\n每个服务实例完全隔离运行，每个实例都有固定的 CPU 和内存。 能充分利用成熟的云基础设施。 封装了服务的实施技术。一旦服务打包成虚拟机就变成了黑盒，虚拟机的管理 API 成为部署该服务的 API。 缺点：\n资源利用率低。有操作系统的开销。公有 IaaS 部署成本会因利用率低而增高。 部署服务的新版本通常很缓慢。 用户或组织中的其他人要负责大量无差别的沉重工作。 单容器单服务实例模式 容器技术更为轻量，容器镜像构建速度更快。\n缺点是管理容器镜像是一项无差别的繁重工作。 除非使用 Google Container Engine 或 Amazon EC2 容器服务。\n无服务部署 AWS Lambda 不适合用来部署长期运行的服务。 服务必须保持无状态。 必须用某一种支持的语言完成。\n使用微服务重构单体应用 Martin Fowler 所言，“大规模重写唯一能够保证的只有大规模！”\n应当采取逐步重构单体应用的策略。 逐步构建一个由微服务构成的应用，与单体应用并行运行； 随着时间推移，原先由单体应用实现的功能不断收缩，最后或者完全消失，或者转变成微服务。\n策略：\n停止挖坑：停止单体应用继续变大，应该把部分新代码开发成独立的微服务。 新服务和旧服务直接有一层胶水代码，也被称作防崩溃层（anti-corruption layer）。 拆分前端和后端：一个应用包含表示层，另一个包含业务和数据访问逻辑。 通过远程调用。 提取微服务：提取后单体应用不断收缩。 为需要转化为微服务的模块设置优先级：可以根据获益程度、资源需求等。 如何提取模块 定义模块和单体应用间的粒度接口 单体应用和微服务通过 API 通信 ","description":"","id":25,"section":"posts","tags":["microservices","architecture","reading"],"title":"《Chris Richardson谈微服务软件架构设计》笔记","uri":"https://stksgarcia.github.io/posts/notes-on-microservice-architecture/"},{"content":"本文为《大型网站技术架构：核心原理与案例分析》的读书笔记。\n大型网站架构模式 分层：分层业务 分割：同层业务进行分割，如购物、论坛、搜索、广告 分布式 分布式应用和服务 分布式静态资源 分布式数据和存储 分布式计算 集群 缓存 CDN 反向代理 本地缓存 分布式缓存 异步 冗余 自动化 安全 大型网站核心架构要素 性能、可用性、伸缩性、扩展性和安全性\n网站的高性能架构 Web 前端性能优化 浏览器访问优化 减少 http 请求 使用浏览器缓存 启用压缩 CSS 放在页面最上面，JavaScript 放在页面最下面 减少 Cookie 传输 CDN 加速 反向代理 应用服务器性能优化 分布式缓存 频繁修改的数据：不要缓存频繁修改的数据。 没有热点的访问：大部分数据访问应该集中在小部分数据。 数据不一致与脏读：容忍数据的不一致。 缓存可用性：分布式缓存服务器集群。 缓存预热：在缓存系统启动时就把数据加载好。 缓存穿透：将不存在的数据也缓存（value 值为 null）。 异步操作 使用集群 代码优化 多线程 资源复用：单例和对象池 数据结构 垃圾回收 存储性能优化 机械硬盘 vs. 固态硬盘 B+树 vs. LSM 树 RAID vs. HDFS 网站的高可用架构 高可用的应用 通过负载均衡进行无状态服务的失效转移 应用服务器集群的 Session 管理 Session 复制：适用小型网站。 Session 绑定：将同一 IP 的请求分发到同一台服务器。极少使用。 利用 Cookie 记录 Session：将 Session 记录在客户端，每次请求就发送到服务器。 服务器处理后将修改的 Session 响应给客户端。 Session 服务器 高可用的服务 分级管理：服务优先级 超时设置 异步调用：消息队列 服务降级 拒绝服务：拒绝低优先级应用的调用。 关闭功能：关闭部分不重要的服务，或者服务内部关闭部分不重要的功能。 幂等性设计：在服务层保证服务重复调用和调用一次产生的结果相同。 高可用的数据 CAP 原理 数据一致性 Consistency 数据强一致性：各个副本总是一致。 数据用户一致：各个副本可能不一致，通过纠错和校验机制确定一个一致的数据给用户。 数据最终一致：一段时间后一致。 数据可用性 Availability 分区耐受性 Partition Tolerance 数据备份 冷备份：物理存储，无法保证数据最终一致性。 热备份：异步热备份和同步热备份。 失效转移 失效确认：心跳检测和应用程序访问失败报告。 访问转移 数据恢复 软件质量保障 网站发布 自动化测试 预发布验证 代码控制：版本控制 自动化发布 灰度发布：部分发布 网站运行监控 监控数据采集 用户行为日志收集 服务器端日志收集 客户端浏览器日志收集 服务器性能监控 运行数据报告 监控管理 系统报警 失效转移 自动优雅降级 网站的伸缩性架构 网站架构的伸缩性设计 不同功能进行物理分离实现伸缩 单一功能通过集群规模实现伸缩 应用服务器集群的伸缩性设计 HTTP 重定向负载均衡：根据用户的 HTTP 请求计算真实的服务器地址，并写入 HTTP 重定向响应中返回。\n优点是简单。 缺点是两次请求，性能差； 重定向服务器可能成为瓶颈，集群伸缩性规模有限； HTTP302 响应码重定向可能使搜索引擎判断为 SEO 作弊，降低排名。 因此不多见。\nDNS 域名解析负载均衡：在 DNS 中映射多个 IP，根据算法返回 IP 地址。\n大型网站总是部分使用 DNS 域名解析，作为第一级的负载均衡手段，得到的服务器同样也是负载均衡的内部服务器，最后将请求分发到真实的服务器上。\n反向代理负载均衡：优点是负载均衡和反向代理集成在一起，部署简单。缺点是可能成为瓶颈。\nIP 负载均衡：将用户请求的目的地址修改为真实服务器地址，并接收响应，最后修改源地址返回给用户。\n数据链路层负载均衡：将真实服务器设置和负载均衡服务器相同的虚拟 IP，把用户请求的 mac 地址修改为真实服务器，服务器直接响应到用户。\n负载均衡算法\n轮询（Round Robin, RR） 加权轮询（Weighted Round Robin, WRR） 随机（Random）：也可以用加权随机算法。 最少连接（Least Connections）：分发到连接最少的服务器上。 源地址散列（Source Hashing）：把 IP 地址进行 Hash 计算。 数据存储服务器集群的伸缩性设计 关系数据库集群：主从读写分离、分库（业务分割）、分片（将一张表拆分）。 NoSQL 数据库：Apache HBase ","description":"","id":26,"section":"posts","tags":["architecture","web","reading"],"title":"大型网站技术架构读书笔记","uri":"https://stksgarcia.github.io/posts/notes-on-technical-architecture-of-large-websites/"},{"content":"Hi, I\u0026rsquo;m Samuel Garcia.\n","description":"About page","id":27,"section":"","tags":null,"title":"About","uri":"https://stksgarcia.github.io/about/"}]